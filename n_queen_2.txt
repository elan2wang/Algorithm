/*
  
*/
#include<stdio.h>
#include<string.h>
#include<time.h>

#define N 100000

int columnIndex[N];      //各行皇后所在的列
int posDiagonal[2*N-1];  //各主对角线上皇后数量
int negDiagonal[2*N-1];  //各负对角线上皇后数量
int collision;           //冲突数量
int step;                //总共交换的次数

void swap(int *a, int *b)
{
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

void init_chessboard()
{
	int i,r;
	for(i = 0; i < N; i++) columnIndex[i] = i;

	srand((int)time(0));
	for(i = 0; i < N; i++){
		r = rand() % N;
		swap(&columnIndex[i],&columnIndex[r]);
	}

	for(i = 0; i < N; i++){
		posDiagonal[i-columnIndex[i]+N-1]++;
		negDiagonal[i+columnIndex[i]]++;
	}

	for(i = 0; i < 2*N-1; i++){
		collision += posDiagonal[i] > 1 ? posDiagonal[i]-1 : 0;
		collision += negDiagonal[i] > 1 ? negDiagonal[i]-1 : 0;
	}
}

int check_collision(int i, int j)
{
	int ret;
	

	ret = (posDiagonal[i-columnIndex[i]+N-1] > 1 ? 1 : 0) + (negDiagonal[i+columnIndex[i]] > 1 ? 1 : 0) +
	      (posDiagonal[j-columnIndex[j]+N-1] > 1 ? 1 : 0) + (negDiagonal[j+columnIndex[j]] > 1 ? 1 : 0) -
		  (posDiagonal[i-columnIndex[j]+N-1] > 0 ? 1 : 0) - (negDiagonal[i+columnIndex[j]] > 0 ? 1 : 0) -
		  (posDiagonal[j-columnIndex[i]+N-1] > 0 ? 1 : 0) - (negDiagonal[j+columnIndex[i]] > 0 ? 1 : 0);
	return ret;
}

int climb()
{
	int i,j,gain;;
	while(1){
		for(i = 0; i < N; i++){
			for(j = i+1; j < N; j++){
				if(posDiagonal[i-columnIndex[i]+N-1] > 1 || negDiagonal[i+columnIndex[i]] > 1 || 
				   posDiagonal[j-columnIndex[j]+N-1] > 1 || negDiagonal[j+columnIndex[j]] > 1 ){
					gain = check_collision(i,j);
					if(gain > 0){
						posDiagonal[i-columnIndex[i]+N-1]--;
						negDiagonal[i+columnIndex[i]]--;
						posDiagonal[j-columnIndex[j]+N-1]--;
						negDiagonal[j+columnIndex[j]]--;

						swap(&columnIndex[i], &columnIndex[j]);

						posDiagonal[i-columnIndex[i]+N-1]++;
						negDiagonal[i+columnIndex[i]]++;
						posDiagonal[j-columnIndex[j]+N-1]++;
						negDiagonal[j+columnIndex[j]]++;

						step++;
						return collision-gain;
					}
				}

			}

		}

	}
}

int solve_queen()
{
	init_chessboard();
	while(collision){
		printf("collision = %d \n",collision);
		collision = climb();
	}
}

void main()
{
	int i;
	double duration;
	clock_t start = clock();
	
	solve_queen();
	
	duration = (double)(clock()-start) / CLOCKS_PER_SEC;

	printf("The total steps: %d\n", step);
	printf("The total times: %f s\n", duration);
}


